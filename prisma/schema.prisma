// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String           @id @default(cuid())
    name          String?
    email         String?          @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    Taccounts     TradingAccount[]

    Post Post[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// app schema

model TradingAccount {
    id        String   @id @default(cuid())
    margin    Int      @default(100)
    Assets    Assets[]
    statemnet Orders[]
    User      User     @relation(fields: [userId], references: [id])
    userId    String
    watchList String[] @default(["", "", "", "", "", "", ""])
    Pin0      String   @default("ETHUSDT")
    Pin1      String   @default("BTCUSDT")
}

// TODO: update db and code acc to avgprice 
model Assets {
    id           String   @id @default(cuid())
    name         String
    lockedAmount Float    @default(0)
    freeAmount   Float
    AvgPrice     Float    @default(0)
    Orders       Orders[]

    TradingAccount   TradingAccount @relation(fields: [TradingAccountId], references: [id])
    TradingAccountId String

    @@unique([TradingAccountId, name], name: "unique_TradingAccountId_name")
}

model Orders {
    id               String         @id @default(cuid())
    createdAt        DateTime       @default(now())
    name             String
    type             OrderType
    price            Float
    quantity         Float
    status           OrderStatus    @default(open)
    triggerType      EtriggerType // Corrected typo from "trigerType" to "triggerType"
    sl               Int            @default(0)
    tp               Int            @default(0)
    Assets           Assets         @relation(fields: [AssetsId], references: [id])
    AssetsId         String
    TradingAccount   TradingAccount @relation(fields: [TradingAccountId], references: [id])
    TradingAccountId String
}

enum EtriggerType {
    LIMIT
    STOP
    MARKET
}

enum OrderType {
    BUY
    SELL
}

enum OrderStatus {
    open
    completed
    cancelled
}
